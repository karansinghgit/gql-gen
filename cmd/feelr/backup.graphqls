type Feelr {
  id: ID!
  question: String!
  timestamp: String!
  topic: Topic!
}

type Topic {
  id: ID!
  name: String!
}

type FeelrMessage {
  feelr: Feelr!
  user1: User!
  user2: User!
  user1Response: String!
  user2Response: String!
  timestamp: String!
}

type User {
  id: ID!
  name: String!
}

type TextMessage {
  id: ID!
  message: String!
  timestamp: String!
  # type will store whether the message is a feelr or a text
  type: Int!
}

union Message = FeelrMessage | TextMessage

type Chat {
  id: ID!
  sender: User!
  receiver: User!
  messages: [Message!]
}

type Query {
  getTopFeelrs(top: Int = 20): [Feelr!]!
  getMessages(chatID: ID!, last: Int = 50): [Message!]!
  getUserInfo(userID: ID!): User!
}

type Mutation {
  sendTextMessage(chatID: ID!, text: String!): [Message!]!
  createFeelr(chatID: ID!, feelrID: ID!, answer: String!): Feelr!
  sendFeelrResponse(chatID: ID!, feelrID: ID!, answer: String!): Feelr!
}

type Subscription {
  messageAdded(chatID: ID!): Message!
}
